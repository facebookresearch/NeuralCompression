name: Build and Test

# trigger on any PR or push to main
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    name: Build
    strategy:
      max-parallel: 4
      matrix:
        platform: [ubuntu-latest]
        python-version: [3.7, 3.8]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade wheel
          pip install -e .
      - name: Test Import
        run: |
          python -c 'import neuralcompression'

  lint-and-test:
    name: Lint and Test
    strategy:
      max-parallel: 4
      matrix:
        platform: [ubuntu-latest]
        python-version: [3.7, 3.8]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-py${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-py${{ matrix.python-version }}-
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade wheel
          pip install -r dev-requirements.txt
      - name: Check Formatting and Lint
        run: |
          python --version
          black --version
          black neuralcompression tests projects --check
          mypy --version
          mypy neuralcompression
          flake8 --version
          flake8 neuralcompression tests projects
          isort --version
          isort neuralcompression tests projects
      - name: Install NeuralCompression
        run: |
          python setup.py bdist_wheel
          pip install dist/*.whl
      - name: Run pytest
        run: |
          echo -e "PyTorch \c" && pip show torch | grep Version 
          pytest tests
